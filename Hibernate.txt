What is difference between JDBC and Hibernate
----------------------------------------------------------------------
1)jdbc: we can store data in primitive type.(int,string,float)
but in hibernate we can store in Object format.
-------------------------------------------------------------------------------------------
2)In hibernate the connection is written in :- hibernate.cfg.xml
The creation of table is written in:- hibernate.hbm.xml

3)Hibernate is database independent.so it uses java datatype only.

In JDBC to create table for 
oracle data type used are number and varchar2(30) but in 
sqlserver data type used are int and varchar(30)
-------------------------------------------------------------------------------------------
4)Hibernate is a object Relational Mapping tool.(ORM tool) because it stores object into the database.

5)it provides 2 types of caching.

6)In hibernate we neednot have to write the full query.Basic sql queries will be generated by hibernate.

7)query tuning is not required in case of hibernate.

8)development and maintainance is very easy .
--------------------------------------------------------------------------------------------
generator classes:-
------------------------------
1)sequence :-The database sequence is automatically generated.(create sequence)

2)assigned:- It will get the value from the application.

3)increment :- it will increment same as your sequence.(oracle)

4)native :- Ramdom generation of number.
----------------------------------------------------------------------------------------
Session :-
----------------------
1)session.save() :- It is used to save an object into the database.

2)session.update():- It is used to update an object into the database.

3)session.delete():- It is used to delete an existing reord.

4)session.load():- It is used to retrieve  data in object format from the database.

5)session.saveOnUpdate():- It will save the record if not there or update the record in the database.

6)session.evict():-It will change the object from persistent state to detached state.It remove the object from the session.

7)session.flush():- it will only update.

8)session.refresh() :- it will synchronize data into the database.

9)session.clear():- it will remove all the objects from the session.

10)session.contains():- it the object is available in the session then it returns true.

11)session.isOpen():- to check if the session is still open.

12)session.get():- it is similar to session.load() to retrive data from the database. if there is no record in the database get() return null where as the session.load will throw exception.
--------------------------------------------------------------------------------------  
program 1:-
-------------------------
MyPojo.java
------------------------
public class MyPojo
{
int id;
String name,address;
getter();
setter();
}
--------------------------------------
hibernate.cfg.xml
------------------------------
<hibernate-configuration>
<session-factory>
<property name="connection.driver.class"></property>
<property name="connection.url"></property>
<property name="dialect">org.hibernate.dialect.OracleDialect</property>
<property name="hbm2ddl.auto">create</property>
<property name="connection.autocommit">true</property>
<mapping resource="hibernate.hbm.xml"/>
</session-factory>
</hibernate-configuration>
 -------------------------------------------------------------------
hibernate.hbm.xml
---------------------------------
<hibernate-mapping>
<class name="MyPojo" table="employee">
<id name="id" column="id" type="int">
<generator class="assigned"/>
</id>
<property name="name" type="string" column="name"/>
<property name="address" type="string" column="address"/>
</hibernate-mapping>
 ---------------------------------------------------------------------------------
main.java
-------------------------
public class main
{
pscm()throws Exception
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionfactory();
Session ss=sf.openSession();
MyPojo pojo=new MyPojo();
pojo.setId(101);
pojo.setName("Tarun");
pojo.setAddress("chennei");
Transaction tx=ss.beginTransaction();
ss.save(pojo);
tx.commit();
}
}
-------------------------------------------------------------------------------------
Object life cycle:-
--------------------------------
1)Transient :- When new object is created and it is not there in the database.
2)persistent:- if the object is stored in the database and is a associated with the session.
3)detached:- if the object will stored in the database but not associated with any session.
---------------------------------------------------------------------------------------------
1)HQL (Hibernate Query Language)
select * from emp;(sql)
1)from emp (hql)
2)"update student set name=:n where id=:i"
setParameter("n","Meera");
setParameter("i",101);
3)"select max(salary) from emp";
4)"select min(salary) from emp";
----------------------------------------------------------------
2)Criteria
eq() :- equal
ne():- not equal
ge() :- greater than equal 

------------------------------------------------------------------------------
3)projection :- aggregate function(avg,min,max)
------------------------------------------------------------
relationship:-
-----------------------
1)one to one(one student and teacher)
2)one to many(one teacher having many student)
3)many to one(many student having one teacher)
4)many to many(many student having many teachers)
-----------------------------------------------------
cache and Lazy and eager Loading
-----------------------------------------------------
MySql
----------------------
To see the databases
1)show databases;
-----------------------------------------------------
to create database
2)create database cognizantstud;
--------------------------------------------------------
to goto the database
3)use cognizantstud;
-------------------------------------------------------
to drop database
4)drop database cognizantstud;
-----------------------------------------------------------------------
to create a table
5)create table student
( studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------------------------------
6)to insert record
insert into student values(101,'tarun','chennei');
-----------------------------------------------------------------------------------
7)to view the records 
select * from student;
------------------------------------------------------------
8)update the record
update student set address='Bangalore' where name='tarun';
--------------------------------------------------------------------------
9)to create a view (view will not contain any data.it will contain only the query)
create view stud as select studid,name from student;
we can do insert,update and delete of the view it will replect to the base table.
-------------------------------------------------------------------------------
10)to see all the tables and views
show tables;
----------------------------------------------------------------------
11)where condition :-
select * from student where name='tarun';
-------------------------------------------------------------------------
12)distinct :-(unique data will be displayed)
select distinct address from student;
-------------------------------------------------------------------------------
13)order by:-
select * from student order by name;
select * from student order by name asc;
select * from student order by name desc;
--------------------------------------------------------------------------------
14)group by
select address, count(*) from student group by address;
-----------------------------------------------------------------------------------
15)aggregate function
count(),sum(),avg(),min(),max(),first(),last()
---------------------------------------------------------------------
i)select count(*) from student;
first record  :- select name from student limit 1;
last record :-select name from student order by name desc limit 1;
--------------------------------------------------------------------------------------------
16)alter table:-
alter table student add salary int not null;
to add data to salary column :-
update student set salary=45000 where studid=101;
update student set salary=35000 where studid in (102,103,104);
---------------------------------------------------------------------------------
17)select sum(salary) from student;
18)select avg(salary) from student;
19)select min(salary) from student;
20)select max(salary) from student;
----------------------------------------------------------------------------------------------
between and example:-
21)select * from student where salary between 30000 and 46000;
----------------------------------------------------------------------------------------------
like % (wildcard)
----------------------------------------------------------------------------
22)select * from student where name like 'p%';(word starting with p will display)
select * from student where name like '%r';(word ending with r will display)
---------------------------------------------------------------------------
23)truncate table:-
it will delete all the data from the table.
truncate table student;
--------------------------------------------------------------------------- 
24)drop table;
it will delete the data as well as the table also.
drop table student;
-------------------------------------------------------------------------------

25)join
------------------------
create table marks
(studid int(4),
phy int(4),
chem int(4),
maths int(4),
tot int(4),avg int(4));

i)insert into marks(studid,phy,chem,maths) values(101,56,67,78);
ii)update marks set tot=(phy+chem+maths) where studid in (101,102,103);
iii)update marks set avg=tot/3 where studid in (101,102,103);
--------------------------------------

joining 2 tables:-
---------------------------
select a.studid,a.name,a.address,a.salary,b.phy,b.chem,b.maths,b.tot,b.avg from student a,marks b where a.studid=b.studid;
---------------------------------



Hibernate prg-2 (criteria)
----------------------------
product.java
--------------------------------------------
class product
{
int productid;
String proName;
double price;
getter();
setter();
------------------------------------------------
main.java
-------------------------
import java.util.*;
import org.hibernate.*;
import org.hibernate.cfg.*;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
class main
{
psvm(String arg[])
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionfactory();
Session ss=sf.openSession();
Criteria crit=ss.createCriteria(product.class);
Criterion cn=Restrictions.gt("price",new Double(15000.00));
//in the product table we have some products we want to see all the products which are above 15k.....
crit.add(cn);

List li=crit.list();//this list() is in the criteria 
s.o.p("the total no of elements are "+li.size());

Iterator it=li.iterator();
while(it.hasNext())
{
Product p=(Product)it.next();
s.o.p(p.getProductId());
s.o.p(p.getProName());
s.o.p(p.getPrice());
}

ss.close();
sf.close();
}}
-----------------------------------------------------------------------------
load example:-
-----------------------
import java.util.*;
import org.hibernate.*;
import org.hibernate.cfg.*;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
public class Logic 
{
	public static void main(String[] args)
	{
		Configuration cfg=new Configuration();
		cfg.configure();
		SessionFactory sf=cfg.buildSessionFactory();
		Session ss=sf.openSession();
		Object ob=ss.load(Product.class,new Integer(101));
		Product pd=(Product) ob;
		System.out.println("the product id is "+pd.getProductid());
		System.out.println("the product name "+pd.getProName());
		System.out.println("the product price is "+pd.getPrice());
		ss.close();
		sf.close();
		}}
-------------------------------------------------------------------------------------------
	
import java.util.*;
import org.hibernate.*;
import org.hibernate.cfg.*;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
public class Logic 
{
	public static void main(String[] args)
	{
		Configuration cfg=new Configuration();
		cfg.configure();
		SessionFactory sf=cfg.buildSessionFactory();
		Session ss=sf.openSession();
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the productid you want to see details");
		int x=sc.nextInt();
		Query qry=ss.createQuery("from Product p where p.productid=:xyz" );
		qry.setParameter("xyz",x);
		
		List li=qry.list();
		System.out.println("total no of records "+li.size());
		Iterator it=li.iterator();
		while(it.hasNext())
		{
			Object ob=it.next();
			Product pd=(Product) ob;
		System.out.println("the product id is "+pd.getProductid());
		System.out.println("the product name "+pd.getProName());
		System.out.println("the product price is "+pd.getPrice());
		}
		ss.close();
		sf.close();
		}}	
	

---------------------------------------------------------------------------------------
Two tables:-
----------------------------
1)items.java :-itemId,itemName,itemPrice,getter(),setter();

2)product.java:-productId,proName,price,getter(),setter();
--------------------------
hibernate.cfg.xml
----------------------------
items.hbm.xml
--------------------------------------
product.hbm.xml
--------------------------------
logic.java
------------------------
import java.util.*;
import org.hibernate.*;
import org.hibernate.cfg.*;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Restrictions;
public class Logic 
{
	public static void main(String[] args)
	{
		Configuration cfg=new Configuration();
		cfg.configure();
		SessionFactory sf=cfg.buildSessionFactory();
		Session ss=sf.openSession();
Query qry=ss.createQuery("insert into Product(productId,proName,price) select i.itemId,i.itemName,i.itemPrice from Items i where i.itemId=?");
	qry.setParameter(0,101);
	int res=qry.executeUpdate();
s.o.p("number of rows updated"+res);
ss.close();
sf.close();
}
}
---------------------------------------------------------
	
Query qry=ss.createQuery("delete from Product p where p.productId=?");
	qry.setParameter(0,101);
	int res=qry.executeUpdate();
s.o.p("number of rows updated"+res);
------------------------------------------------------------------------------------------------------------
Relationship 4 types (one-one),(one-many),(many-one),(many-many)
----------------------------------------------------------------------------------------------------------
One-one Relation ship :- the employee class has the address reference and the address class has the employee reference.
------------------------------------
Example:- 
employee.java
--------------------------
class Employee 
{
private String empid,name,email;
private Address address;
getter(),setter();
}
----------------------------------
Address.java
-------------------------
class Address
{
private String addressid,line,city,state,country;
private Employee employee;
getter(),setter();
}
----------------------------------------------------------
employee.hbm.xml
---------------------------------
<class name="Employee" table="emp1">
<id name="empid">
<generator class="assigned"></generator>
</id>
<property>name</property>
<property>email</property>
<one-to-one name="address"></one-to-one>
</class>
--------------------------------------------------------------
address.hbm.xml
---------------------------------
<class name="Address" table="address1">
<id name="addressid">
<generator class="assigned"></generator>
</id>
<property>line</property>
<property>city</property>
<property>state</property>
<property>country</property>
</class>
------------------------------------------------------------
main.java
---------------------
class main
{
PSVM(String args[])
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionFactory();
Session ss=sf.openSession();
Transaction ts=ss.beginTransaction();

Employee e1=new Employee();
e1.setEmpId(101);
e1.setName("Meka");
e1.setEmail("meka@gmail.com");

Address a1=new Address();
a1.setAddressid(101);
a1.setLine("AB-101");
a1.setCity("Bangalore");
a1.setState("Karnataka");
a1.setCountry("India");

e1.setAddress(a1);
a1.setEmployee(e1);

ss.save(e1);
tx.commit();
ss.close();
}
}
--------------------------------------------------------------------------
one-to-Many
---------------------
example:-
----------------
Question.class
------------------------
class Question
{
int id;
String name;
Set<Answer> answers;
getter(),setter();
-------------------------------------------------
Answer.class
---------------------------
class Answer
{
int id;
String ans,postedby;
getter(),setter();
--------------------------------------------
question.hbm.xml
--------------------------
<class name="Question" table="question">
 <id name="id">
<generator class="assigned">/generator>
</id>
<property name="name"></property>
<set name="answers">
<key column="qid"></key>
<one-to-many class="Answer">
</set>

</class>
<class name="Answer" table="answer">
<id name="id">
<generator class="assigned">/generator>
</id>
<property name="ans"></property>
<property name="postedby"></property>
</class>
--------------------------------------------------------------
main.class
---------------------
class main
{
PSVM(String args[])
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionFactory();
Session ss=sf.openSession();
Transaction ts=ss.beginTransaction();

Answer a1=new Answer();
a1.setAns("java is platform");
a1.setPostedby("Tarun");

Answer a2=new Answer();
a2.setAns("java is langauage");
a2.setPostedby("Meka");

ArrayList<Answer> list1=new ArrayList<Answer>();
list1.add(a1);
list1.add(a2);


Question q1=new Question();
q1.setName("what is java");
q1.setAnswer(list1);

ss.save(q1);
ts.commit();
ss.close();
}}
--------------------------------------------------------------
Many-to-Many
---------------------------
Course.class
------------------------
class Course
{
int cid;
String cname;
getter();
setter();
}
---------------------------------------
Student.class
-----------------------
class Student
{
int sid;
String sname;
Set<Course> crs=new HashSet<Course>();
Student(); <- default const
Student(sname,Set<Course> course)
getter(),setter();
-------------------------------------------
course.hbm.xml
---------------------
<class name="Course" table="course">
<id name=cid>
<generator class="assigned"></generator></id>
<property name="cname"></property>
</class>
----------------------------------------
student.hbm.xml
---------------------------
<class name="Student" table="student">
<id name=sid>
<generator class="assigned"></generator></id>
<property name="cname"></property>

<set name="course" table="studentcourse">
<key column="stid"/>
<many-to-many column="cousid" class="Course"/>
</set>
</class>
------------------------------------------------------------------
main.java
-----------------------
class main
{
PSVM(String args[])
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionFactory();
Session ss=sf.openSession();
Transaction ts=ss.beginTransaction();
Set<Course> crs=new HashSet<Course>();
crs.add("Maths");
crs.add("Computer");

Student stud1=new Student("Meka",crs);
Student stud2=new Student("Tarun",crs);
ss.save(stud1);
ss.save(stud2);
ts.commit();
ss.close();
}
}
------------------------------------------------------
cascade=all :- if you want to do insert or update or delete operation on the parent class the child class object also will be inserted or updated or deleted.
------------------------------------------------------------
employee :- empid primary key,name (cannot delete empid which is reffered in the salary table)
salary:- empid references employee,salary   (empid is orphan)
----------------------------------------------------

Spring and Hibernate configuration :(4.x) version
------------------------------------------------------------------------
main.class
--------------------
class main
{
public static void main(String args[])
{
ApplicationContext context = new ClassPathXmlApplicationContext("conf/OrmConf.xml");

Item item1 = (Item) context.getBean("item");
Item item2 = (Item) context.getBean("item");
Item item3 = (Item) context.getBean("item");

item1.setiCode(501);
item1.setiName("Laptop i3");
item1.setiPrice("20000");


item2.setiCode(502);
item2.setiName("Laptop i5");
item2.setiPrice("30000");

item3.setiCode(503);
item3.setiName("Laptop i7");
item3.setiPrice("50000");

ItemDAO itemDAO = (ItemDAO) context.getBean("itemDAO");
itemDAO.addItem(item1);
itemDAO.addItem(item2);
itemDAO.addItem(item3);

List <Item> items=itemDAO.getItems();

for(Item item : items)
s.o.p(item);
}}
----------------------------------------
ItemDAO.class
------------------------
@Repository("itemDAO")
class ItemDAO extends HibernateDaoSupport
{
ItemDAO()
{}
@Autowired
@Qualifier("sessionFactory")
@Required
public void setMySessionFactory(SessionFactory sessionFactory)
{
this.setSessionFactory(sessionFactory);
}

@Transactional
public void addItem(Item item)
{
this.getHibernateTemplate().save(item);
}

@Transactional
public void removeItem(Item item)
{
this.getHibernateTemplate().delete(item);
}

@Transactional
public void updateItem(Item item)
{
this.getHibernateTemplate().update(item);
}

public Item getItem(int iCode)
{
return this.getHibernateTemplate().get(item.class,icode); 
}


public List<item> getItems()
{
return this.getHibernateTemplate().loadAll(Item.class);
}
}
------------------------------------------------------------------
Item.java
---------------------

@SuppressWarnings("serial")
@Component("item")
@Scope("prototype")
@Entity
@Table(name="spItem")
class Item implements Serializable
{
@Id
int iCode;
String iName;
double iPrice;

public Item()
{}
item(int iCode,String iName,double iPrice)
{
this.iCode=iCode;
this.iName=iName;
this.iPrice=iPrice;
}
getter();
setter();
@Override
public String toString()
{
return "Item : [iCode=" + iCode +",iName=" +iName+",iPrice= "+iPrice ]";
}
------------------------------------------------

conf/OrmConf.xml :-
----------------------------------
<beans>
<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName">
<property name="URL">
<property name="UserName">
<property name="Password">
</bean>

<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
<property name="dataSource" ref="myDataSource">
<list>
<value>Item</value>
</list>

<props>
<prop key="hibernate.hbm2ddl.auto>update</prop>
<prop key="hibernate.dialect">MySqlDialect</prop>
<prop key="hibernate.show_sql">true</prop>
</props>
</bean>

<bean id="txManager" class="org.springframework.jdbc.dataSource.DataSourceTransactionManager">
</beans>
-----------------------------------------------------------------------
 Hibernate Annotation
------------------------------------
1)@Id :-this is the primary key field.
2)@GeneratedValue :- Hibernate will descide which generated class to be used to make the code portable between different databases.
3)@Column :- this is used to specify the details of the columns to which a field or property will be mapped.
4)@Table :- it allows you to specify the details of the table where to persist the data 
5)@Autowired:- setter byType,properties,constructor. 
   
---------------------------------------------------------------------------------------------
singleton :- where single object is created.(default)
prototype :- where multiple object is created. 
-------------------------------------------------------------------------------------------
@Component:-This annotation tells the spring container to pick the bean defined in the DAO class.
example:- @Component("DAO")
@Repository :- it will import the PersonDAO interface into the implemented class and also handles the exceptions.
-----------------
@Transactional :- spring will create proxies for classes that declare @Transactional 
which will implement the same interface which the class will implement. so when the client calls the object the call will intercept and the data is injected via proxy mechanism. 
-------------------------------------------------------------------------------------
Spring MVC with Hibernate and Mysql and annotation (4.x)
------------------------------------------------------------------------------
create database dbtest;
use dbtest;
create table Person(personid int,name varchar(30),country varchar(30)); 
----------------------------------------------------------------------------------------------
we will create a person.jsp to add person
we display report and have option to edit person or delete person.
----------------------------------------------------------------------------------------------
person.jsp
----------------------
<h1> Add a Employee</h1>
<form action="/person/add">
id<input type=text>
name<input type=text>
country<input type=text>
<href = "/edit/${person.id}>edit</a>
<href = "/remove/${person.id}>Delete</a>

--------------------------------------------

Hibernate Entity Bean
-----------------------------------
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GeneratedType;
import javax.persistence.Id;
import javax.persistence.Table;
@Entity
@Table(name="Person");
public class Person
{
@Id
@Column(name="id")
@GeneratedValue(strategy=GenerationType.IDENTITY)
private int id;
private String name;
private String country;
getter(),setter();
@Override
public String toString()
{
return "id="+id+,"name="+name+",country="+country;
}
}
-----------------------------------------------------------------------
PersonDAO.java(interface)
-----------------------------------------------
public interface PersonDAO
{
public void addPerson(Person p);
public void updatePerson(Person p);
public List<Person> listPerson();
public Person getPersonById(int id);
public void removePerson(int id);
}
---------------------------------------------------------
DAOimplementation.java
---------------------------------------------------
import org.hibernate.session;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.springframework.stereotype.Repository;
@Repository("PersonDAO");
public class PersonDAOImpl implements PersonDAO
{
private SessionFactory sessionfactory;

private void setSessionFactory(SessionFactory sf)
{
this.sessionFactory =sf;
}

@Override
public void addPerson(Person p)
{
Session session=this.sessionFactory.getCurrentSession();
session.save(p);
logger.info("person saved successfully");
}

@Override
public void updatePerson(Person p)
{
Session session=this.sessionFactory.getCurrentSession();
session.update(p);
logger.info("person updated successfully");
}
 
@Override
public List<Person> listPerson()
{
Session session=this.sessionFactory.getCurrentSession();
List<Person> personList =session.createQuery("from Person").list();
for(Person p : personList)
{
logger.info("person List::"+p);
}

return personList;
}

@Override
public Person getPersonById(int id)
{
Session session=this.sessionFactory.getCurrentSession();
Person p=(Person) session.load(Person.class,new Integer(id));
logger.info("person data loaded"+p);
return p;
}

@Override
public void removePerson(int id)
{
Session session=this.sessionFactory.getCurrentSession();
Person p=(Person) session.load(Person.class,new Integer(id));
if(null != p)
session.delete(p);
}
logger.info("person data deleted"+p);
}
}
-----------------------------------------------------------------------------
SpringService Classes
------------------------------------
(Model)
public interface PersonService
{
public void addPerson(Person p);
public void updatePerson(Person p);
public List<Person> listPersons();
public Person getPersonById(int id);
public void removePerson(int id);
}
-------------------------------------------------------
SpringServiceImpl Classes
----------------------------------------------
@Service
public class PersonServiceImpl implements PersonService
{
private PersonDAO personDAO;
{
this.personDAO=personDAO;
}

@Override
@Transactional
public void addPerson(Person p)
{
this.personDAO.addperson(p);
}

@Override
@Transactional
public void updatePerson(Person p)
{
this.personDAO.updatePerson(p);
}

@Override
@Transactional
public List<Person> listPerson()
{
return this.personDAO.listPerson();
}

@Override
@Transactional
public Person getPersonById(int id)
{
return this.personDAO.getPersonById(id);
}

@Override
@Transactional
public void removePerson(int id)
{
this.personDAO.removePerson(id);
}

}
-----------------------------------------------------------
controller class
-----------------------------------
import model.Person;
import service.PersonService;

@Controller  <--this indecates that this is a controllor class

public class PersonController
{
private PersonService ps;

@Autowired(required=true)
@Qualifier(value="ps")

public void setPersonService(PersonService ps)
{
this.ps=ps;
}

//to display the list of person
@RequestMapping(value="/persons")
public String listPersons(Model model)
{
model.addAttribute("person",new Person());
model.addAttribute("listPersons",this.personService.listPerson());
return "person";
}

//to add or update person
@RequestMapping(value="/person/add")
public String addPerson(@ModelAttribute("person") Person p)
{
if(p.getId()==0)
{
this.personService.addPerson(p);
}
else
{
this.personService.updatePerson(p);
}
return "redirect:/persons";
}

//to remove person
@RequestMapping(value="/remove/{id}")
public String removePerson(@PathVariable("id") int id)
{
this.personService.removePerson(id);
return "redirect:/persons";
}

//to edit person info
@RequestMapping(value="/edit/{id}")
public String editPerson(@PathVariable("id") int id)
{
model.addAttribute("person",this.personService.getPersonById(id);
model.addAttribute("listPersons",this.personService.listPersons());
return "person";
}
-------------------------------------------------------------------------

spring-context.xml
-----------------------------
viewResolver
<beans:property name="prefix"
<beans:property name="suffix"
---------------------------------------------------
spring mvc+hibernate+oracle 10xe
-------------------------------------------------------
src----com.rahul------
		bean
		controller
		dao  ----hibernate
		model
		service ---spring
------resources-------database.properties

webcontent-------web-inf
		lib
		views----html,jsp pages.
---------------------------------------------------------------------------------------------
bean 
-------------
//create table employee(empid,empname,empage,salary,empaddress)

EmployeeBean
{
int id;
String name,address;
int age;
int salary;
getter(),setter();
}
---------------------------------------------------------------
DAO
-----------------
interface
--------------------
public interface EmployeeDao
{
void addemployee(Employee emp);
void List<Employee> listemp();
Employee getEmployee(int empid);
void deleteEmployee(Employee emp);
-------------------------------------------
DAOImp
----------------
@Repository("EmployeeDao")
public class EmployeeDaoImp implements EmployeeDao
{

@Autowired
private SessionFactory sf;

public void addEmployee(Employee emp)
{
sf.getCurrentSession().saveOrUpdate(emp);
}

public List<Employee> listemp()
{
return (List<Employee> sf.getCurrentSession.createCriterria(Employee.class).list();
}


public Employee getEmployee(int empid)
{
return (Employee) sf.getCurrentSession().get(Employee.class,empid);
}

public void deleteEmployee(Employee emp)
{
sf.getCurrentSession().createQuery("delete from employee where empid="employee.getEmpid()).executeUpdate();
}
}
------------------------------------
Model
------------------
import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

 
@Entity
@Table(name="Employee")
public class Employee implements Serializable{

	
	@Id
	//@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name = "empid")
	private Integer empId;
	
	@Column(name="empname")
	private String empName;
	
	@Column(name="empaddress")
	private String empAddress;
	
	@Column(name="salary")
	private Long salary;
	
	@Column(name="empAge")
	private Integer empAge;

	public Integer getEmpId() {
		return empId;
	}

	public void setEmpId(Integer empId) {
		this.empId = empId;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	public String getEmpAddress() {
		return empAddress;
	}

	public void setEmpAddress(String empAddress) {
		this.empAddress = empAddress;
	}

	public Long getSalary() {
		return salary;
	}

	public void setSalary(Long salary) {
		this.salary = salary;
	}

	public Integer getEmpAge() {
		return empAge;
	}

	public void setEmpAge(Integer empAge) {
		this.empAge = empAge;
	}

}


------------------------------------------------------------
service same to DAO
----------------
import java.util.List;
public interface EmployeeService {
	
	public void addEmployee(Employee employee);

	public List<Employee> listEmployeess();
	
	public Employee getEmployee(int empid);
	
	public void deleteEmployee(Employee employee);
}
---------------------------------------------
serviceImp will link to the employeeDao
-----------------------------------------------------
@Service("employeeService")
public class serviceImp implement  EmployeeService

@private EmployeeDao empdao;

@Transactional()
public void addEmployee(Employee emp)
{
empdao.addEmployee(employee);
}

@Transactional()
public List<Employee> listEmployee()
{
return empdao.listemp();
}

public Employee getEmployee(int empid)
{
return empdao.getEmployee(int empid);
}

public void deleteEmployee(Employee employee)
{
empdao.deleteEmployee(Employee emp);
}
------------------------------------
database.properties
-------------------------------
database.driver=oracle.jdbc.driver.OracleDriver
database.url=jdbc:oracle:thin:@localhost:1521:xe
database.user=system
database.password=1234
hibernate.dialect=org.hibernate.dialect.OracleDialect
hibernate.show_sql=true
hibernate.hbm2ddl.auto=update
----------------------------------------------------
views ---jsp
------------------------------
addEmployee.jsp
----------------------------
<form method="post" action="springmvchiber/save.html">
id<input type=text>
name<input type=text>
age<input type=text>
salary<input type=text>
address<input type=text>
<submit>
</form>

<table>
empid-----Employee name----age-----salary-----address----<href =edit.html>edit----<href=delete.html>delete
</table>

------------------------------------------------------------
employeeList.jsp
--------------------------------
<a href=add.html>add more emplyee</a>
redirect to addEmployee.jsp
-----------------------------------------
index.jsp
-------------
<a href="employee.html">List of employee</a>
<a href="add.html">add employee</a>
------------------------------------------------------------------------------
Controller class.
------------------------------
public class EmployeeController
{
@Autowired
private EmployeeService empservice;

@RequestMapping(value="/save",method=RequestMethod.POST)
public ModelAndView saveEmployee()
{
empservice.addEmployee(emp);
return new ModelAndView("redirect:/add");
}

@RequestMapping(value="/employees",method=RequestMethod.get)
public ModelAndView ListEmployee()
{
empservice.ListEmployee(emp);
return new ModelAndView("employeeList",model);
}

@RequestMapping(value="/add",method=RequestMethod.get)
public ModelAndView saveEmployee()
{
empservice.addEmployee(emp);
return new ModelAndView("addEmployee",model);
}

@RequestMapping(value="/index",method=RequestMethod.get)
public ModelAndView welcome()
{
return new ModelAndView("index");
}

@RequestMapping(value="/delete",method=RequestMethod.get)
public ModelAndView deleteEmployee()
{
empservice.deleteEmployee(emp);
model.put("employee",null);
return new ModelAndView("addEmployee",model);
}


@RequestMapping(value="/edit",method=RequestMethod.get)
public ModelAndView editEmployee()
{
empservice.editEmployee(emp);
model.put("employee",null);
return new ModelAndView("addEmployee",model);
}



































